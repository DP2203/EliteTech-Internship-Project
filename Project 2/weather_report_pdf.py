import pandas as pd
from fpdf import FPDF
from datetime import datetime
import matplotlib.pyplot as plt
import os

# Function to read and validate weather data
def load_weather_data(csv_path):
    df = pd.read_csv(csv_path)
    required_cols = ["City", "Temperature", "Humidity", "Wind Speed"]
    for col in required_cols:
        if col not in df.columns:
            raise ValueError(f"Missing required column: {col}")
    return df

# Function to calculate summary statistics
def calculate_statistics(df):
    stats = {
        "Average Temperature": df["Temperature"].mean(),
        "Max Temperature": df["Temperature"].max(),
        "Min Temperature": df["Temperature"].min(),
        "Average Humidity": df["Humidity"].mean(),
        "Max Humidity": df["Humidity"].max(),
        "Min Humidity": df["Humidity"].min(),
        "Average Wind Speed": df["Wind Speed"].mean(),
        "Max Wind Speed": df["Wind Speed"].max(),
        "Min Wind Speed": df["Wind Speed"].min(),
    }
    return stats

# Function to create and save a bar chart of temperature per city
def create_temperature_chart(df, chart_path="temp_chart.png"):
    plt.figure(figsize=(8, 4))
    plt.bar(df["City"], df["Temperature"], color='skyblue')
    plt.xlabel("City")
    plt.ylabel("Temperature (°C)")
    plt.title("Temperature by City")
    plt.xticks(rotation=30, ha='right')
    plt.tight_layout()
    plt.savefig(chart_path)
    plt.close()
    return chart_path

# Function to generate a unique PDF report
def generate_weather_pdf(df, stats, output_file="Weather_Report_Unique.pdf"):
    pdf = FPDF()
    pdf.add_page()

    # Title with color background
    pdf.set_fill_color(70, 130, 180)  # Steel Blue
    pdf.set_text_color(255, 255, 255)
    pdf.set_font("Arial", "B", 18)
    pdf.cell(0, 16, "Weather Data Summary Report", ln=True, align="C", fill=True)
    pdf.ln(4)

    # Date
    pdf.set_text_color(0, 0, 0)
    pdf.set_font("Arial", "I", 12)
    pdf.cell(0, 10, f"Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M')}", ln=True, align="R")
    pdf.ln(2)

    # Summary Statistics Section
    pdf.set_font("Arial", "B", 14)
    pdf.set_fill_color(220, 220, 220)
    pdf.cell(0, 10, "Summary Statistics", ln=True, fill=True)
    pdf.set_font("Arial", "", 12)
    for key, value in stats.items():
        if "Temperature" in key:
            pdf.cell(0, 8, f"{key}: {value:.2f} °C", ln=True)
        elif "Humidity" in key:
            pdf.cell(0, 8, f"{key}: {value:.2f} %", ln=True)
        elif "Wind Speed" in key:
            pdf.cell(0, 8, f"{key}: {value:.2f} km/h", ln=True)
    pdf.ln(6)

    # Insert bar chart image
    chart_path = create_temperature_chart(df)
    pdf.set_font("Arial", "B", 12)
    pdf.cell(0, 10, "Temperature by City", ln=True, align="C")
    pdf.image(chart_path, x=30, w=150)
    pdf.ln(8)

    # Table Header with color
    pdf.set_font("Arial", "B", 12)
    pdf.set_fill_color(100, 149, 237)  # Cornflower Blue
    col_widths = [45, 45, 45, 45]
    headers = ["City", "Temperature (°C)", "Humidity (%)", "Wind Speed (km/h)"]
    for i, header in enumerate(headers):
        pdf.cell(col_widths[i], 10, header, border=1, align="C", fill=True)
    pdf.ln()

    # Table Rows
    pdf.set_font("Arial", "", 12)
    for _, row in df.iterrows():
        pdf.cell(col_widths[0], 10, str(row["City"]), border=1, align="C")
        pdf.cell(col_widths[1], 10, f"{row['Temperature']:.1f}", border=1, align="C")
        pdf.cell(col_widths[2], 10, f"{row['Humidity']}", border=1, align="C")
        pdf.cell(col_widths[3], 10, f"{row['Wind Speed']}", border=1, align="C")
        pdf.ln()

    # Footer
    pdf.set_y(-20)
    pdf.set_font("Arial", "I", 10)
    pdf.set_text_color(128, 128, 128)
    pdf.cell(0, 10, "Report generated by weather_report_pdf.py", align="C")

    pdf.output(output_file)
    print(f"✅ Unique PDF Weather Report Generated: {output_file}")

    # Clean up chart image
    if os.path.exists(chart_path):
        os.remove(chart_path)

# Main execution
if __name__ == "__main__":
    df = load_weather_data("weather_data.csv")
    stats = calculate_statistics(df)
    generate_weather_pdf(df, stats) 